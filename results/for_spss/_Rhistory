'att','RT',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','RT',model,'sklearn'))
}
# RT features, statsmodel results
att = read.csv('att_logistic_statsmodel_RT_features.csv')
features = c(
'RT_correct_coef',
'RT_awareness_coef',
'RT_confidence_coef')
id_vars = c('model','r2','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0&att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
att_sub$value = exp(att_sub$value)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.RT.statsmodel = summary(result.aov)
capture.output(capture.att.RT.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','RT',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','RT',model,'statsmodel'))
}
#### model 3:
# 6 features ,sklearn results
att = read.csv("ATT_6_features.csv")
features = c('correct','awareness','confidence',
'RT_correct','RT_awareness','RT_confidence')
id_vars = c('model','score','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0 & att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.6.sklearn = summary(result.aov)
capture.output(capture.att.6.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','6',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','6',model,'sklearn'))
}
# 6 features, statsmodel results
att = read.csv('att_logistic_statsmodel_6_features.csv')
features = c('correct_coef',
'awareness_coef',
'confidence_coef',
'RT_correct_coef',
'RT_awareness_coef',
'RT_confidence_coef')
id_vars = c('model','r2','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0&att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
att_sub$value = exp(att_sub$value)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.6.statsmodel = summary(result.aov)
capture.output(capture.att.6.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','6',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','6',model,'statsmodel'))
}
setwd("C:\\Users\\ning\\OneDrive\\python works\\metacognition\\results")
library('reshape2') # need for manipulate the data frame to the format that R could work
library('DescTools')
### model 1:
# judgement features ,sklearn results
pos = read.csv("Pos_3_1_features.csv")
features = c('correct','awareness','confidence')
id_vars = c('model','score','sub','window')
# manipulate the format of the data frame
pos = melt(pos,id.vars = id_vars,measure.vars = features)
# select the window (trials)
pos_sub = subset(pos,pos$window>0 & pos$window<4)
# say these variables are discrete
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
pos_sub$variable = factor(pos_sub$variable)
# given decision tree or logistic regression
for (model in levels(pos_sub$model)){
# select the data frame
df_sub = pos_sub[pos_sub$model == model,]
# the ANOVA
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.pos.3.sklearn = summary(result.aov)
capture.output(capture.pos.3.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'pos','3',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'pos','3',model,'sklearn'))
}
# odd ratios of the logistic regression
# judgement features, statsmodel results
pos = read.csv('pos_logistic_statsmodel_3_1_features.csv')
features = c('correct_coef',
'awareness_coef',
'confidence_coef')
id_vars = c('model','r2','sub','window')
pos = melt(pos,id.vars = id_vars,measure.vars = features)
pos_sub = subset(pos,pos$window>0&pos$window<4)
# say these variables are discrete
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
# convert the weights to odd ratio by exponential
pos_sub$value = exp(pos_sub$value)
# given only the logistic regression
for (model in levels(pos_sub$model)){
# meaningless step, not doing anything
df_sub = pos_sub[pos_sub$model == model,]
# the ANOVA
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.pos.3.statsmodel = summary(result.aov)
# save the anova to a txt file
capture.output(capture.pos.3.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'pos','3',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'pos','3',model,'statsmodel'))
}
### model 2:
#RT features, sklearn results
pos = read.csv("Pos_RT_features.csv")
features = c('RT_correct','RT_awareness','RT_confidence')
id_vars = c('model','score','sub','window')
pos = melt(pos,id.vars = id_vars,measure.vars = features)
pos_sub = subset(pos,pos$window>0 & pos$window<4)
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
for (model in levels(pos_sub$model)){
df_sub = pos_sub[pos_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.pos.RT.sklearn = summary(result.aov)
capture.output(capture.pos.RT.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'pos','RT',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'pos','RT',model,'sklearn'))
}
# RT features, statsmodel results
pos = read.csv('pos_logistic_statsmodel_RT_features.csv')
features = c(
'RT_correct_coef',
'RT_awareness_coef',
'RT_confidence_coef')
id_vars = c('model','r2','sub','window')
pos = melt(pos,id.vars = id_vars,measure.vars = features)
pos_sub = subset(pos,pos$window>0&pos$window<4)
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
pos_sub$value = exp(pos_sub$value)
for (model in levels(pos_sub$model)){
df_sub = pos_sub[pos_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.pos.RT.statsmodel = summary(result.aov)
capture.output(capture.pos.RT.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'pos','RT',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'pos','RT',model,'statsmodel'))
}
#### model 3:
# 6 features ,sklearn results
pos = read.csv("Pos_6_features.csv")
features = c('correct','awareness','confidence',
'RT_correct','RT_awareness','RT_confidence')
id_vars = c('model','score','sub','window')
pos = melt(pos,id.vars = id_vars,measure.vars = features)
pos_sub = subset(pos,pos$window>0 & pos$window<4)
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
for (model in levels(pos_sub$model)){
df_sub = pos_sub[pos_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.pos.6.sklearn = summary(result.aov)
capture.output(capture.pos.6.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'pos','6',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'pos','6',model,'sklearn'))
}
# 6 features, statsmodel results
pos = read.csv('pos_logistic_statsmodel_6_features.csv')
features = c('correct_coef',
'awareness_coef',
'confidence_coef',
'RT_correct_coef',
'RT_awareness_coef',
'RT_confidence_coef')
id_vars = c('model','r2','sub','window')
pos = melt(pos,id.vars = id_vars,measure.vars = features)
pos_sub = subset(pos,pos$window>0&pos$window<4)
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
pos_sub$value = exp(pos_sub$value)
for (model in levels(pos_sub$model)){
df_sub = pos_sub[pos_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.pos.6.statsmodel = summary(result.aov)
capture.output(capture.pos.6.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'pos','6',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'pos','6',model,'statsmodel'))
}
setwd("C:\\Users\\ning\\OneDrive\\python works\\metacognition\\results")
library('reshape2') # need for manipulate the data frame to the format that R could work
library('DescTools')
### model 1:
# judgement features ,sklearn results
att = read.csv("ATT_3_1_features.csv")
features = c('correct','awareness','confidence')
id_vars = c('model','score','sub','window')
# manipulate the format of the data frame
att = melt(att,id.vars = id_vars,measure.vars = features)
# select the window (trials)
att_sub = subset(att,att$window>0 & att$window<4)
# say these variables are discrete
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
# given decision tree or logistic regression
for (model in levels(att_sub$model)){
# select the data frame
df_sub = att_sub[att_sub$model == model,]
# the ANOVA
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.3.sklearn = summary(result.aov)
capture.output(capture.att.3.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','3',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','3',model,'sklearn'))
}
# odd ratios of the logistic regression
# judgement features, statsmodel results
att = read.csv('att_logistic_statsmodel_3_1_features.csv')
features = c('correct_coef',
'awareness_coef',
'confidence_coef')
id_vars = c('model','r2','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0&att$window<4)
# say these variables are discrete
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
# convert the weights to odd ratio by exponential
att_sub$value = exp(att_sub$value)
# given only the logistic regression
for (model in levels(att_sub$model)){
# meaningless step, not doing anything
df_sub = att_sub[att_sub$model == model,]
# the ANOVA
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.3.statsmodel = summary(result.aov)
# save the anova to a txt file
capture.output(capture.att.3.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','3',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','3',model,'statsmodel'))
}
### model 2:
#RT features, sklearn results
att = read.csv("ATT_RT_features.csv")
features = c('RT_correct','RT_awareness','RT_confidence')
id_vars = c('model','score','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0 & att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.RT.sklearn = summary(result.aov)
capture.output(capture.att.RT.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','RT',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','RT',model,'sklearn'))
}
# RT features, statsmodel results
att = read.csv('att_logistic_statsmodel_RT_features.csv')
features = c(
'RT_correct_coef',
'RT_awareness_coef',
'RT_confidence_coef')
id_vars = c('model','r2','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0&att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
att_sub$value = exp(att_sub$value)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.RT.statsmodel = summary(result.aov)
capture.output(capture.att.RT.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','RT',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','RT',model,'statsmodel'))
}
#### model 3:
# 6 features ,sklearn results
att = read.csv("ATT_6_features.csv")
features = c('correct','awareness','confidence',
'RT_correct','RT_awareness','RT_confidence')
id_vars = c('model','score','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0 & att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.6.sklearn = summary(result.aov)
capture.output(capture.att.6.sklearn,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','6',model,'sklearn'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','6',model,'sklearn'))
}
# 6 features, statsmodel results
att = read.csv('att_logistic_statsmodel_6_features.csv')
features = c('correct_coef',
'awareness_coef',
'confidence_coef',
'RT_correct_coef',
'RT_awareness_coef',
'RT_confidence_coef')
id_vars = c('model','r2','sub','window')
att = melt(att,id.vars = id_vars,measure.vars = features)
att_sub = subset(att,att$window>0&att$window<4)
att_sub$sub = factor(att_sub$sub)
att_sub$window = factor(att_sub$window)
att_sub$model = factor(att_sub$model)
att_sub$value = exp(att_sub$value)
for (model in levels(att_sub$model)){
df_sub = att_sub[att_sub$model == model,]
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
capture.att.6.statsmodel = summary(result.aov)
capture.output(capture.att.6.statsmodel,
file = sprintf("anova results/%s_%s_%s_%s.txt",
'att','6',model,'statsmodel'))
eta = EtaSq(result.aov,type = 1)
capture.output(eta,
file=sprintf("anova results/Eta sq %s_%s_%s_%s.txt",
'att','6',model,'statsmodel'))
}
setwd("C:\\Users\\ning\\OneDrive\\python works\\metacognition\\results")
library('reshape2') # need for manipulate the data frame to the format that R could work
library('DescTools')
### model 1:
# judgement features ,sklearn results
pos = read.csv("Pos_3_1_features.csv")
features = c('correct','awareness','confidence')
id_vars = c('model','score','sub','window')
# manipulate the format of the data frame
pos = melt(pos,id.vars = id_vars,measure.vars = features)
# select the window (trials)
pos_sub = subset(pos,pos$window>0 & pos$window<4)
# say these variables are discrete
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
pos_sub$variable = factor(pos_sub$variable)
setwd("C:\\Users\\ning\\OneDrive\\python works\\metacognition\\results")
library('reshape2') # need for manipulate the data frame to the format that R could work
library('DescTools')
### model 1:
# judgement features ,sklearn results
pos = read.csv("Pos_3_1_features.csv")
features = c('correct','awareness','confidence')
id_vars = c('model','score','sub','window')
# manipulate the format of the data frame
pos = melt(pos,id.vars = id_vars,measure.vars = features)
# select the window (trials)
pos_sub = subset(pos,pos$window>0 & pos$window<4)
# say these variables are discrete
pos_sub$sub = factor(pos_sub$sub)
pos_sub$window = factor(pos_sub$window)
pos_sub$model = factor(pos_sub$model)
pos_sub$variable = factor(pos_sub$variable)
model = 'DecisionTreeClassifier'
# select the data frame
df_sub = pos_sub[pos_sub$model == model,]
# the ANOVA
result.aov = with(df_sub,
aov(value~window*variable+Error(sub/(window*variable))))
print(model)
print(summary(result.aov))
setwd("C:\\Users\\ning\\OneDrive\\python works\\metacognition\\results\\for_spss")
datos = read.csv("pos,judgment features,feature importance.csv")
datos$X <- NULL
# transpose data.frame to fit ANOVA structure
tdatos<-t(datos)
# PUT in one column
datosdef<-c(tdatos[,1], tdatos[,2], tdatos[,3], tdatos[,4], tdatos[,5], tdatos[,6], tdatos[,7], tdatos[,8], tdatos[,9], tdatos[,10], tdatos[,11], tdatos[,12], tdatos[,13], tdatos[,14], tdatos[,15])
ev1=c(1, 1, 1, 2, 2, 2, 3, 3, 3)#WINDOW 1, 2, 3
ev1_window=rep(ev1, c(15))
ev2=c("awareness", "confidence", "correct", "awareness", "confidence", "correct", "awareness", "confidence", "correct")#RATiNGS 1 aw 2 conf 3 corr
ev2_ratings<-rep(ev2, c(15))
subj<-rep()#create Vector for the subject factor
for (p in 1:15){
su<-c(1, 1, 1, 1, 1, 1, 1, 1, 1)
subj<-append(subj, su*p)
}
##NOTE FOR ANOVA WE NEED A DATA.FRAME with numeric type for dependent variable
## and factor type for the independent variables
subj<-as.factor(subj)
ev1_window<-as.factor(ev1_window)
ev2_ratings<-as.factor(ev2_ratings)
anovamatrix<-data.frame(datosdef, ev1_window, ev2_ratings, subj)
anova1=aov(datosdef~ev1_window*ev2_ratings+Error(subj/(ev1_window*ev2_ratings)), anovamatrix)
print (summary(anova1))
print(summary(result.aov))
